/**
 * Konfigurator-aspnetcore-Backend
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ByteArrayServiceResponseDto } from '../model/byteArrayServiceResponseDto';
import { GetAllGameMapIdDtoServiceResponseDto } from '../model/getAllGameMapIdDtoServiceResponseDto';
import { GetGameMapResponseDtoServiceResponseDto } from '../model/getGameMapResponseDtoServiceResponseDto';
import { GetHighscoresDtoArrayServiceResponseDto } from '../model/getHighscoresDtoArrayServiceResponseDto';
import { ServiceResponse } from '../model/serviceResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

import { backendPath } from './api';


@Injectable()
export class GameService {

    protected basePath = backendPath;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param gameMapId
     * @param username
     * @param score
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gameAddHighscorePost(gameMapId?: number, username?: string, score?: number, observe?: 'body', reportProgress?: boolean): Observable<ServiceResponse>;
    public gameAddHighscorePost(gameMapId?: number, username?: string, score?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceResponse>>;
    public gameAddHighscorePost(gameMapId?: number, username?: string, score?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceResponse>>;
    public gameAddHighscorePost(gameMapId?: number, username?: string, score?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (gameMapId !== undefined && gameMapId !== null) {
            queryParameters = queryParameters.set('gameMapId', <any>gameMapId);
        }
        if (username !== undefined && username !== null) {
            queryParameters = queryParameters.set('username', <any>username);
        }
        if (score !== undefined && score !== null) {
            queryParameters = queryParameters.set('score', <any>score);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ServiceResponse>('post',`${this.basePath}/Game/addHighscore`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param gameMapId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gameGameMapIdGet(gameMapId: number, observe?: 'body', reportProgress?: boolean): Observable<GetGameMapResponseDtoServiceResponseDto>;
    public gameGameMapIdGet(gameMapId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetGameMapResponseDtoServiceResponseDto>>;
    public gameGameMapIdGet(gameMapId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetGameMapResponseDtoServiceResponseDto>>;
    public gameGameMapIdGet(gameMapId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (gameMapId === null || gameMapId === undefined) {
            throw new Error('Required parameter gameMapId was null or undefined when calling gameGameMapIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetGameMapResponseDtoServiceResponseDto>('get',`${this.basePath}/Game/${encodeURIComponent(String(gameMapId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gameGetGameMapsGet(observe?: 'body', reportProgress?: boolean): Observable<GetAllGameMapIdDtoServiceResponseDto>;
    public gameGetGameMapsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllGameMapIdDtoServiceResponseDto>>;
    public gameGetGameMapsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllGameMapIdDtoServiceResponseDto>>;
    public gameGetGameMapsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetAllGameMapIdDtoServiceResponseDto>('get',`${this.basePath}/Game/getGameMaps`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param graphic
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gameGetGraphicGet(graphic?: string, observe?: 'body', reportProgress?: boolean): Observable<ByteArrayServiceResponseDto>;
    public gameGetGraphicGet(graphic?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByteArrayServiceResponseDto>>;
    public gameGetGraphicGet(graphic?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByteArrayServiceResponseDto>>;
    public gameGetGraphicGet(graphic?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (graphic !== undefined && graphic !== null) {
            queryParameters = queryParameters.set('graphic', <any>graphic);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ByteArrayServiceResponseDto>('get',`${this.basePath}/Game/getGraphic`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param gameMapId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gameGetHighscoresGet(gameMapId?: number, observe?: 'body', reportProgress?: boolean): Observable<GetHighscoresDtoArrayServiceResponseDto>;
    public gameGetHighscoresGet(gameMapId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetHighscoresDtoArrayServiceResponseDto>>;
    public gameGetHighscoresGet(gameMapId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetHighscoresDtoArrayServiceResponseDto>>;
    public gameGetHighscoresGet(gameMapId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (gameMapId !== undefined && gameMapId !== null) {
            queryParameters = queryParameters.set('gameMapId', <any>gameMapId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetHighscoresDtoArrayServiceResponseDto>('get',`${this.basePath}/Game/getHighscores`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
